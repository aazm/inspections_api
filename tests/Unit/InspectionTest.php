<?php

namespace Tests\Unit;

use App\Services\InspectionService;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class InspectionTest extends TestCase
{
    private $payload;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        if(!file_exists(__DIR__.'/../stubs/payload.1.json')) {
            throw new \RuntimeException('Test payload is missing');
        }

        $this->payload = file_get_contents(__DIR__.'/../stubs/payload.1.json');

    }

    public function testValidJsonStringProcessedSuccessful()
    {
        $service = new InspectionService();
        $this->assertTrue($service->fill($this->payload));
    }

    public function testInvalidJsonStringReturnsFalse()
    {
        $service = new InspectionService();
        $this->assertFalse($service->fill("{]"));
    }

    public function testDoubleFillingThrowsException()
    {
        $this->expectException(\RuntimeException::class);

        $service = new InspectionService();

        $service->fill($this->payload);
        $service->fill('');
    }

    public function testFillingCreatesTwoPagesForPayload1()
    {
        $service = new InspectionService();
        $service->fill($this->payload);

        $items = $service->getItems();
        $this->assertEquals(2, $items->count());
    }

    public function testInspectPayload1ResultMatch()
    {
        $service = new InspectionService();
        $service->fill($this->payload);

        $result = $service->inspect();
        $this->assertEquals([95, 192, 49], $result);

    }
    public function testInspectPayload2ResultMatch()
    {
        return;
        if(!file_exists(__DIR__.'/../stubs/payload.2.json')) {
            throw new \RuntimeException('Test payload is missing');
        }

        $this->payload = file_get_contents(__DIR__.'/../stubs/payload.2.json');

        $service = new InspectionService();
        $this->assertTrue($service->fill($this->payload));

        $result = $service->inspect();
        $this->assertEquals([102, 102, 100], $result);

    }

}
